from collections import deque
def bfs(graph,start,end):
    if start == end:
        return [start]
    queue = deque([start])
    visited = set()

    while queue:
        path = queue.popleft()
        node = path[-1]

        if node  in visited:
            continue
        visited.add(node)

        for neighbor in graph[node]:
            new_path = list(path)
            new_path.append(neighbor)

            if neighbor == end:
                return new_path
            queue.append(new_path)
    return None
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

start_node = 'A'
end_node = 'F'

print(bfs(graph,start_node,end_node))
