def dfs(graph,start_node):
    stack = [start_node]
    visited = set()
    traversal_order = []

    while stack:
        current_node = stack.pop()
        if current_node not in visited:
            visited.add(current_node)
            traversal_order.append(current_node)

            for neighbor in reversed(graph[current_node]):
                if neighbor not in visited:
                    stack.append(neighbor)


    return traversal_order
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

start_node = 'A'


print("Shortest Path:", dfs(graph, start_node))
