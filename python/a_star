h = {
    's' : 14,
    'b' : 12,
    'c' : 11,
    'd' : 6,
    'e' : 4,
    'f' : 11,
    'g' : 0
}
graph = {
    's' : {'b': 4,'c': 3},
    'b' : {'f': 11},
    'c' : {'e': 10,'d': 7},
    'd' : {'e': 2},
    'e' : {'g': 5},
    'f' : {'g' : 16},
    'g' : { }

}
def a_star(start,goal):
    open_set = {start : h[start]}
    came_from = {}
    g_score = {city: float('inf') for city in graph.keys()}
    g_score[start] = 0

    while open_set:
        current = min(open_set, key=lambda x : open_set[x])

        if current == goal:
            path = reconstruct_path(came_from,current)
            print(g_score[current])
            return path
        del open_set[current]

        for neighbor, dist in graph[current].items():
            tentative_g_score = g_score[current] + dist
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + h[neighbor]
                open_set[neighbor] = f_score
    return None
def reconstruct_path(came_from,current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.insert(0,current)
    return path
path = a_star('s','g')
print("path found by a*:",path)
